%YAML:1.0

#common parameters
imu_topic: "/sync/imu"
image_topic: "/sync/cam1/img"
output_path: "/home/park/my/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 512
distortion_parameters:
   k1: -0.05630203660441834
   k2: 0.05993244155933173
   p1: -0.06260330200323502
   p2: 0.018442519540926454
projection_parameters:
   fx: 347.8854069007831
   fy: 348.0805527994946
   cx: 319.9025925305882
   cy: 256.02394767971583

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.06454793,0.03177522,0.99740859,
           -0.99703246,0.04407028,0.0631196, 
           -0.04195043,-0.99852298,0.03452557]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.07996612, 0.05604727, -0.04953655]

#feature traker paprameters max_cnt: 150 
max_cnt: 100            # max feature number in feature tracking
min_dist: 26            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.16  # max solver itration time (ms), to guarantee real time 0.04
max_num_iterations: 32   # max solver itrations, to guarantee real time 8
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance 
acc_n: 0.04          # accelerometer measurement noise standard deviation. 0.04 
gyr_n: 0.00375         # gyroscope measurement noise standard deviation.     0.0004
acc_w: 0.0004         # accelerometer bias random work noise standard deviation.  0.0004
gyr_w: 0.000375       # gyroscope bias random work noise standard deviation.     #4.0e-5 2.0e-6
g_norm: 9.810     # gravity magnitude 9.81007

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/park/my/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
